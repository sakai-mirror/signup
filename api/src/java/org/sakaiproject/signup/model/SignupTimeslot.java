/**********************************************************************************
 * $URL: https://source.sakaiproject.org/contrib/signup/branches/2-6-x/api/src/java/org/sakaiproject/signup/model/SignupTimeslot.java $
 * $Id: SignupTimeslot.java 56827 2009-01-13 21:52:18Z guangzheng.liu@yale.edu $
***********************************************************************************
 *
 * Copyright (c) 2007, 2008, 2009 Yale University
 * 
 * Licensed under the Educational Community License, Version 1.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at
 * 
 *      http://www.opensource.org/licenses/ecl1.php
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 *   
 * See the LICENSE.txt distributed with this file.
 *
 **********************************************************************************/
package org.sakaiproject.signup.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * <p>
 * This class holds the information for signup time slot. This object is mapped
 * directly to the DB storage by Hibernate
 * </p>
 */
public class SignupTimeslot {

	private Long id;

	@SuppressWarnings("unused")
	private int version;

	private Date startTime;

	private Date endTime;

	private boolean locked;

	private boolean canceled;

	private int maxNoOfAttendees;

	private boolean displayAttendees;// TODO : this should be moved to

	// meeting class

	private List<SignupAttendee> attendees;

	private List<SignupAttendee> waitingList;

	/**
	 * a constants maximum number for attendees
	 */
	public static final int UNLIMITED = Integer.MAX_VALUE;

	/**
	 * constructor
	 * 
	 */
	public SignupTimeslot() {
		attendees = new ArrayList<SignupAttendee>();
		waitingList = new ArrayList<SignupAttendee>();
	}

	/**
	 * check if this time slot is cancelled
	 * 
	 * @return true if this time slot is cancelled
	 */
	public boolean isCanceled() {
		return canceled;
	}

	/**
	 * this is a setter
	 * 
	 * @param cancel
	 *            a boolean value
	 */
	public void setCanceled(boolean cancel) {
		this.canceled = cancel;
	}

	/**
	 * get the end time when the time slot ends
	 * 
	 * @return the end time
	 */
	public Date getEndTime() {
		return endTime;
	}

	/**
	 * this is a setter
	 * 
	 * @param endTime
	 *            a end time
	 */
	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	/**
	 * check if the time slot is locked
	 * 
	 * @return true if the time slot is locked
	 */
	public boolean isLocked() {
		return locked;
	}

	/**
	 * this is a setter
	 * 
	 * @param locked
	 *            a boolean value
	 */
	public void setLocked(boolean locked) {
		this.locked = locked;
	}

	/**
	 * get the maximum number of attendees, which is allowed in the time slot
	 * 
	 * @return the maximum number of attendees
	 */
	public int getMaxNoOfAttendees() {
		return maxNoOfAttendees;
	}

	/**
	 * this is a setter
	 * 
	 * @param noOfAttendees
	 *            the maximum allowed number of attendees
	 */
	public void setMaxNoOfAttendees(int noOfAttendees) {
		this.maxNoOfAttendees = noOfAttendees;
	}

	/**
	 * get the starting time of the time slot
	 * 
	 * @return the starting time of the time slot
	 */
	public Date getStartTime() {
		return startTime;
	}

	/**
	 * this is a setter
	 * 
	 * @param startTime
	 *            the starting time of the time slot
	 */
	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}

	/**
	 * get the sequence Id, which is generated by DB
	 * 
	 * @return the sequence Id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * this is a setter
	 * 
	 * @param id
	 *            the sequence Id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * get a list of SignupAttendee objects, who have signed up in the time slot
	 * 
	 * @return a list of SignupAttendee objects
	 */
	public List<SignupAttendee> getAttendees() {
		return attendees;
	}

	/**
	 * this is a setter
	 * 
	 * @param attendees
	 *            a list of SignupAttendee objects
	 */
	public void setAttendees(List<SignupAttendee> attendees) {
		this.attendees = attendees;
	}

	/**
	 * check if the name of Attendee should be display to public
	 * 
	 * @return true if the name of Attendee should be display to public
	 */
	public boolean isDisplayAttendees() {
		return displayAttendees;
	}

	/**
	 * this is a setter
	 * 
	 * @param showAttendees
	 *            a boolean value
	 */
	public void setDisplayAttendees(boolean showAttendees) {
		this.displayAttendees = showAttendees;
	}

	/**
	 * get a list of SignupAttendee objects, who are on the waiting list in the
	 * time slot
	 * 
	 * @return a list of SignupAttendee objects
	 */
	public List<SignupAttendee> getWaitingList() {
		return waitingList;
	}

	/**
	 * this is a setter
	 * 
	 * @param waitingList
	 *            a list of SignupAttendee objects, who are on the waiting list
	 *            in the time slot
	 */
	public void setWaitingList(List<SignupAttendee> waitingList) {
		this.waitingList = waitingList;
	}

	/**
	 * check if current time slot is available for adding more people
	 * 
	 * @return true if current time slot is available for adding more people
	 */
	public boolean isAvailable() {
		if (attendees == null)
			return true;

		return (attendees.size() < maxNoOfAttendees);
	}

	/**
	 * get the SignupAttendee object according to the attendee's Id
	 * 
	 * @param attendeeId
	 *            a attendee's Id
	 * @return a SignupAttendee object
	 */
	public SignupAttendee getAttendee(String attendeeId) {
		if (attendees == null)
			return null;
		for (SignupAttendee attendee : attendees) {
			if (attendee.getAttendeeUserId().equals(attendeeId))
				return attendee;
		}
		return null;
	}

	/**
	 * get the SignupAttendee object according to the attendee's Id, who is on
	 * the waiting list at the time slot
	 * 
	 * @param attendeeId
	 *            an attendee's Id
	 * @return a SignupAttendee object
	 */
	public SignupAttendee getWaiter(String attendeeId) {
		if (waitingList == null)
			return null;
		for (SignupAttendee waiter : waitingList) {
			if (waiter.getAttendeeUserId().equals(attendeeId))
				return waiter;
		}
		return null;
	}

	/**
	 * check if the time slot allows unlimited attendee to join
	 * 
	 * @return true if the time slot allows unlimited attendee to join
	 */
	public boolean isUnlimitedAttendee() {
		return (maxNoOfAttendees == UNLIMITED);
	}

}
